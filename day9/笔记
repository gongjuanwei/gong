上周回顾：
    面向对象：
        class Car:
            def run(self):
                print("run..")

            def __init__(self):
                print("实例化的时候执行的")

            def __del__(self):
                print("析构函数")


        类 --一个模板一个模型
        实例化
            bmw = Car()
        实例、对象
        构造函数
        析构函数
        self的作用

from  loguru import logger
logger.add('a.log')

logger.debug("xx")
logger.info()
logger.waring()
logger.error()

面试题：
    abcsdgsf1s23f
    1. sdgs 2
    2. f123f 3

搭建测试环境：
    1、安装依赖软件
        java mysql redis mq kafka
    2、获取代码 git 分支
    3、导入基础数据（建表、导入数据）
    4、修改配置文件
    5、编译、打包 （根据具体的情况）
    6、重启

    日常部署
    2、3、4、5、6

本周内容：
    面向对象讲完

        实例方法 带self的
        实例变量 self.xx
        类方法
            不用实例化，直接通过类名就可以调用的
            它可以调用其他的类方法和类变量，但是不可以调用实例方法和实例变量
        类变量
            公共的，随着类一起定义
        静态方法
            就是和普通方法没有任何区别，只是定义在类里面而已，
            它无法使用类方法、实例方法、类变量
        属性方法
            看起来像变量的一个方法
    多线程、多进程、单元测试

    线程
        程序的最小的执行单位
        py文件就是一个进程，这个进程里面本来就是有一个线程的，本来的这个线程，就叫做主线程
        线程和线程之间是独立的。
        锁
            多个线程同时操作同一个数据的时候
        8c
        8个线程
        cpu 上下文切换
        python里面的多线程利用不了多核cpu

        所有的任务：
            1、io密集型任务
                --多线程
            2、cpu密集型任务
                --多进程

    进程
        一堆资源的集合
        图片、文字、线程

    单元测试
        unittest
        pytest
        接口自动化
        Jenkins